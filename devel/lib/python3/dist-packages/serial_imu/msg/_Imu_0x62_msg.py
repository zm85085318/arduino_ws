# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_imu/Imu_0x62_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import serial_imu.msg
import std_msgs.msg

class Imu_0x62_msg(genpy.Message):
  _md5sum = "83afb4dd1d120fe370f84d0e12c2a103"
  _type = "serial_imu/Imu_0x62_msg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 0x62  data_package
Header header
uint8 tag
uint8 gw_id
uint8 node_num
Imu_data_package[16] node_data


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: serial_imu/Imu_data_package
uint8 tag
uint8 bitmap
uint8 id
float32 prs
uint32 time
uint32 frame_rate
float32 acc_x
float32 acc_y
float32 acc_z
float32 gyr_x
float32 gyr_y
float32 gyr_z
float32 mag_x
float32 mag_y
float32 mag_z
float32 eul_r
float32 eul_p
float32 eul_y
float32 quat_w
float32 quat_x
float32 quat_y
float32 quat_z
"""
  __slots__ = ['header','tag','gw_id','node_num','node_data']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','serial_imu/Imu_data_package[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tag,gw_id,node_num,node_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Imu_0x62_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tag is None:
        self.tag = 0
      if self.gw_id is None:
        self.gw_id = 0
      if self.node_num is None:
        self.node_num = 0
      if self.node_data is None:
        self.node_data = [serial_imu.msg.Imu_data_package() for _ in range(16)]
    else:
      self.header = std_msgs.msg.Header()
      self.tag = 0
      self.gw_id = 0
      self.node_num = 0
      self.node_data = [serial_imu.msg.Imu_data_package() for _ in range(16)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.tag, _x.gw_id, _x.node_num))
      if len(self.node_data) != 16:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (16, len(self.node_data), 'self.node_data')))
      for val1 in self.node_data:
        _x = val1
        buff.write(_get_struct_3Bf2I16f().pack(_x.tag, _x.bitmap, _x.id, _x.prs, _x.time, _x.frame_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyr_x, _x.gyr_y, _x.gyr_z, _x.mag_x, _x.mag_y, _x.mag_z, _x.eul_r, _x.eul_p, _x.eul_y, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.node_data is None:
        self.node_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.tag, _x.gw_id, _x.node_num,) = _get_struct_3B().unpack(str[start:end])
      self.node_data = []
      for i in range(0, 16):
        val1 = serial_imu.msg.Imu_data_package()
        _x = val1
        start = end
        end += 79
        (_x.tag, _x.bitmap, _x.id, _x.prs, _x.time, _x.frame_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyr_x, _x.gyr_y, _x.gyr_z, _x.mag_x, _x.mag_y, _x.mag_z, _x.eul_r, _x.eul_p, _x.eul_y, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z,) = _get_struct_3Bf2I16f().unpack(str[start:end])
        self.node_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.tag, _x.gw_id, _x.node_num))
      if len(self.node_data) != 16:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (16, len(self.node_data), 'self.node_data')))
      for val1 in self.node_data:
        _x = val1
        buff.write(_get_struct_3Bf2I16f().pack(_x.tag, _x.bitmap, _x.id, _x.prs, _x.time, _x.frame_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyr_x, _x.gyr_y, _x.gyr_z, _x.mag_x, _x.mag_y, _x.mag_z, _x.eul_r, _x.eul_p, _x.eul_y, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.node_data is None:
        self.node_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.tag, _x.gw_id, _x.node_num,) = _get_struct_3B().unpack(str[start:end])
      self.node_data = []
      for i in range(0, 16):
        val1 = serial_imu.msg.Imu_data_package()
        _x = val1
        start = end
        end += 79
        (_x.tag, _x.bitmap, _x.id, _x.prs, _x.time, _x.frame_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.gyr_x, _x.gyr_y, _x.gyr_z, _x.mag_x, _x.mag_y, _x.mag_z, _x.eul_r, _x.eul_p, _x.eul_y, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z,) = _get_struct_3Bf2I16f().unpack(str[start:end])
        self.node_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3Bf2I16f = None
def _get_struct_3Bf2I16f():
    global _struct_3Bf2I16f
    if _struct_3Bf2I16f is None:
        _struct_3Bf2I16f = struct.Struct("<3Bf2I16f")
    return _struct_3Bf2I16f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
