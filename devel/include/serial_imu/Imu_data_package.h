// Generated by gencpp from file serial_imu/Imu_data_package.msg
// DO NOT EDIT!


#ifndef SERIAL_IMU_MESSAGE_IMU_DATA_PACKAGE_H
#define SERIAL_IMU_MESSAGE_IMU_DATA_PACKAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_imu
{
template <class ContainerAllocator>
struct Imu_data_package_
{
  typedef Imu_data_package_<ContainerAllocator> Type;

  Imu_data_package_()
    : tag(0)
    , bitmap(0)
    , id(0)
    , prs(0.0)
    , time(0)
    , frame_rate(0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , gyr_x(0.0)
    , gyr_y(0.0)
    , gyr_z(0.0)
    , mag_x(0.0)
    , mag_y(0.0)
    , mag_z(0.0)
    , eul_r(0.0)
    , eul_p(0.0)
    , eul_y(0.0)
    , quat_w(0.0)
    , quat_x(0.0)
    , quat_y(0.0)
    , quat_z(0.0)  {
    }
  Imu_data_package_(const ContainerAllocator& _alloc)
    : tag(0)
    , bitmap(0)
    , id(0)
    , prs(0.0)
    , time(0)
    , frame_rate(0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , gyr_x(0.0)
    , gyr_y(0.0)
    , gyr_z(0.0)
    , mag_x(0.0)
    , mag_y(0.0)
    , mag_z(0.0)
    , eul_r(0.0)
    , eul_p(0.0)
    , eul_y(0.0)
    , quat_w(0.0)
    , quat_x(0.0)
    , quat_y(0.0)
    , quat_z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _tag_type;
  _tag_type tag;

   typedef uint8_t _bitmap_type;
  _bitmap_type bitmap;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _prs_type;
  _prs_type prs;

   typedef uint32_t _time_type;
  _time_type time;

   typedef uint32_t _frame_rate_type;
  _frame_rate_type frame_rate;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;

   typedef float _gyr_x_type;
  _gyr_x_type gyr_x;

   typedef float _gyr_y_type;
  _gyr_y_type gyr_y;

   typedef float _gyr_z_type;
  _gyr_z_type gyr_z;

   typedef float _mag_x_type;
  _mag_x_type mag_x;

   typedef float _mag_y_type;
  _mag_y_type mag_y;

   typedef float _mag_z_type;
  _mag_z_type mag_z;

   typedef float _eul_r_type;
  _eul_r_type eul_r;

   typedef float _eul_p_type;
  _eul_p_type eul_p;

   typedef float _eul_y_type;
  _eul_y_type eul_y;

   typedef float _quat_w_type;
  _quat_w_type quat_w;

   typedef float _quat_x_type;
  _quat_x_type quat_x;

   typedef float _quat_y_type;
  _quat_y_type quat_y;

   typedef float _quat_z_type;
  _quat_z_type quat_z;





  typedef boost::shared_ptr< ::serial_imu::Imu_data_package_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_imu::Imu_data_package_<ContainerAllocator> const> ConstPtr;

}; // struct Imu_data_package_

typedef ::serial_imu::Imu_data_package_<std::allocator<void> > Imu_data_package;

typedef boost::shared_ptr< ::serial_imu::Imu_data_package > Imu_data_packagePtr;
typedef boost::shared_ptr< ::serial_imu::Imu_data_package const> Imu_data_packageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_imu::Imu_data_package_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_imu::Imu_data_package_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_imu::Imu_data_package_<ContainerAllocator1> & lhs, const ::serial_imu::Imu_data_package_<ContainerAllocator2> & rhs)
{
  return lhs.tag == rhs.tag &&
    lhs.bitmap == rhs.bitmap &&
    lhs.id == rhs.id &&
    lhs.prs == rhs.prs &&
    lhs.time == rhs.time &&
    lhs.frame_rate == rhs.frame_rate &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.gyr_x == rhs.gyr_x &&
    lhs.gyr_y == rhs.gyr_y &&
    lhs.gyr_z == rhs.gyr_z &&
    lhs.mag_x == rhs.mag_x &&
    lhs.mag_y == rhs.mag_y &&
    lhs.mag_z == rhs.mag_z &&
    lhs.eul_r == rhs.eul_r &&
    lhs.eul_p == rhs.eul_p &&
    lhs.eul_y == rhs.eul_y &&
    lhs.quat_w == rhs.quat_w &&
    lhs.quat_x == rhs.quat_x &&
    lhs.quat_y == rhs.quat_y &&
    lhs.quat_z == rhs.quat_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_imu::Imu_data_package_<ContainerAllocator1> & lhs, const ::serial_imu::Imu_data_package_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_imu::Imu_data_package_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_imu::Imu_data_package_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_imu::Imu_data_package_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_imu::Imu_data_package_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_imu::Imu_data_package_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_imu::Imu_data_package_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_imu::Imu_data_package_<ContainerAllocator> >
{
  static const char* value()
  {
    return "282c5be5a2e43c668a2bbf282a34b55a";
  }

  static const char* value(const ::serial_imu::Imu_data_package_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x282c5be5a2e43c66ULL;
  static const uint64_t static_value2 = 0x8a2bbf282a34b55aULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_imu::Imu_data_package_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_imu/Imu_data_package";
  }

  static const char* value(const ::serial_imu::Imu_data_package_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_imu::Imu_data_package_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 tag\n"
"uint8 bitmap\n"
"uint8 id\n"
"float32 prs\n"
"uint32 time\n"
"uint32 frame_rate\n"
"float32 acc_x\n"
"float32 acc_y\n"
"float32 acc_z\n"
"float32 gyr_x\n"
"float32 gyr_y\n"
"float32 gyr_z\n"
"float32 mag_x\n"
"float32 mag_y\n"
"float32 mag_z\n"
"float32 eul_r\n"
"float32 eul_p\n"
"float32 eul_y\n"
"float32 quat_w\n"
"float32 quat_x\n"
"float32 quat_y\n"
"float32 quat_z\n"
;
  }

  static const char* value(const ::serial_imu::Imu_data_package_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_imu::Imu_data_package_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag);
      stream.next(m.bitmap);
      stream.next(m.id);
      stream.next(m.prs);
      stream.next(m.time);
      stream.next(m.frame_rate);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.gyr_x);
      stream.next(m.gyr_y);
      stream.next(m.gyr_z);
      stream.next(m.mag_x);
      stream.next(m.mag_y);
      stream.next(m.mag_z);
      stream.next(m.eul_r);
      stream.next(m.eul_p);
      stream.next(m.eul_y);
      stream.next(m.quat_w);
      stream.next(m.quat_x);
      stream.next(m.quat_y);
      stream.next(m.quat_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Imu_data_package_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_imu::Imu_data_package_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_imu::Imu_data_package_<ContainerAllocator>& v)
  {
    s << indent << "tag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag);
    s << indent << "bitmap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bitmap);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "prs: ";
    Printer<float>::stream(s, indent + "  ", v.prs);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "frame_rate: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_rate);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
    s << indent << "gyr_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyr_x);
    s << indent << "gyr_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyr_y);
    s << indent << "gyr_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyr_z);
    s << indent << "mag_x: ";
    Printer<float>::stream(s, indent + "  ", v.mag_x);
    s << indent << "mag_y: ";
    Printer<float>::stream(s, indent + "  ", v.mag_y);
    s << indent << "mag_z: ";
    Printer<float>::stream(s, indent + "  ", v.mag_z);
    s << indent << "eul_r: ";
    Printer<float>::stream(s, indent + "  ", v.eul_r);
    s << indent << "eul_p: ";
    Printer<float>::stream(s, indent + "  ", v.eul_p);
    s << indent << "eul_y: ";
    Printer<float>::stream(s, indent + "  ", v.eul_y);
    s << indent << "quat_w: ";
    Printer<float>::stream(s, indent + "  ", v.quat_w);
    s << indent << "quat_x: ";
    Printer<float>::stream(s, indent + "  ", v.quat_x);
    s << indent << "quat_y: ";
    Printer<float>::stream(s, indent + "  ", v.quat_y);
    s << indent << "quat_z: ";
    Printer<float>::stream(s, indent + "  ", v.quat_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_IMU_MESSAGE_IMU_DATA_PACKAGE_H
