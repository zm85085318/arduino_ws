// Generated by gencpp from file behavior_tree/TurningAroundGoal.msg
// DO NOT EDIT!


#ifndef BEHAVIOR_TREE_MESSAGE_TURNINGAROUNDGOAL_H
#define BEHAVIOR_TREE_MESSAGE_TURNINGAROUNDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace behavior_tree
{
template <class ContainerAllocator>
struct TurningAroundGoal_
{
  typedef TurningAroundGoal_<ContainerAllocator> Type;

  TurningAroundGoal_()
    : rotation_direction(0)  {
    }
  TurningAroundGoal_(const ContainerAllocator& _alloc)
    : rotation_direction(0)  {
  (void)_alloc;
    }



   typedef uint32_t _rotation_direction_type;
  _rotation_direction_type rotation_direction;





  typedef boost::shared_ptr< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TurningAroundGoal_

typedef ::behavior_tree::TurningAroundGoal_<std::allocator<void> > TurningAroundGoal;

typedef boost::shared_ptr< ::behavior_tree::TurningAroundGoal > TurningAroundGoalPtr;
typedef boost::shared_ptr< ::behavior_tree::TurningAroundGoal const> TurningAroundGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behavior_tree::TurningAroundGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behavior_tree::TurningAroundGoal_<ContainerAllocator1> & lhs, const ::behavior_tree::TurningAroundGoal_<ContainerAllocator2> & rhs)
{
  return lhs.rotation_direction == rhs.rotation_direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behavior_tree::TurningAroundGoal_<ContainerAllocator1> & lhs, const ::behavior_tree::TurningAroundGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behavior_tree

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06a633bcc37319791ff50c2da73ac867";
  }

  static const char* value(const ::behavior_tree::TurningAroundGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06a633bcc3731979ULL;
  static const uint64_t static_value2 = 0x1ff50c2da73ac867ULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behavior_tree/TurningAroundGoal";
  }

  static const char* value(const ::behavior_tree::TurningAroundGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint32 rotation_direction \n"
;
  }

  static const char* value(const ::behavior_tree::TurningAroundGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotation_direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurningAroundGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behavior_tree::TurningAroundGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behavior_tree::TurningAroundGoal_<ContainerAllocator>& v)
  {
    s << indent << "rotation_direction: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rotation_direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOR_TREE_MESSAGE_TURNINGAROUNDGOAL_H
