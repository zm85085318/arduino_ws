// Generated by gencpp from file distanceangle/DistanceAngle.msg
// DO NOT EDIT!


#ifndef DISTANCEANGLE_MESSAGE_DISTANCEANGLE_H
#define DISTANCEANGLE_MESSAGE_DISTANCEANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace distanceangle
{
template <class ContainerAllocator>
struct DistanceAngle_
{
  typedef DistanceAngle_<ContainerAllocator> Type;

  DistanceAngle_()
    : distance(0.0)
    , angle(0.0)
    , orientation(0.0)  {
    }
  DistanceAngle_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , angle(0.0)
    , orientation(0.0)  {
  (void)_alloc;
    }



   typedef double _distance_type;
  _distance_type distance;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::distanceangle::DistanceAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::distanceangle::DistanceAngle_<ContainerAllocator> const> ConstPtr;

}; // struct DistanceAngle_

typedef ::distanceangle::DistanceAngle_<std::allocator<void> > DistanceAngle;

typedef boost::shared_ptr< ::distanceangle::DistanceAngle > DistanceAnglePtr;
typedef boost::shared_ptr< ::distanceangle::DistanceAngle const> DistanceAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::distanceangle::DistanceAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::distanceangle::DistanceAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::distanceangle::DistanceAngle_<ContainerAllocator1> & lhs, const ::distanceangle::DistanceAngle_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.angle == rhs.angle &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::distanceangle::DistanceAngle_<ContainerAllocator1> & lhs, const ::distanceangle::DistanceAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace distanceangle

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::distanceangle::DistanceAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::distanceangle::DistanceAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::distanceangle::DistanceAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::distanceangle::DistanceAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::distanceangle::DistanceAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::distanceangle::DistanceAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::distanceangle::DistanceAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba7feca1680ebb56471bca9c9cffcabd";
  }

  static const char* value(const ::distanceangle::DistanceAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba7feca1680ebb56ULL;
  static const uint64_t static_value2 = 0x471bca9c9cffcabdULL;
};

template<class ContainerAllocator>
struct DataType< ::distanceangle::DistanceAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "distanceangle/DistanceAngle";
  }

  static const char* value(const ::distanceangle::DistanceAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::distanceangle::DistanceAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 distance\n"
"float64 angle\n"
"float64 orientation\n"
;
  }

  static const char* value(const ::distanceangle::DistanceAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::distanceangle::DistanceAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.angle);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DistanceAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::distanceangle::DistanceAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::distanceangle::DistanceAngle_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "orientation: ";
    Printer<double>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DISTANCEANGLE_MESSAGE_DISTANCEANGLE_H
